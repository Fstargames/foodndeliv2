apiVersion: apps/v1
kind: Deployment
metadata:
  name: foodndeliv-deployment
  labels:
    app: foodndeliv # Used by the Service to select these pods
spec:
  replicas: 1 # Start with 1 pod, to be scaled later if needed
  selector:
    matchLabels:
      app: foodndeliv # Must match spec.template.metadata.labels
  template: # This is the blueprint for the Pods
    metadata:
      labels:
        app: foodndeliv # Pods will have this label
    spec:
      initContainers: # Added to ensure the DB service is resolvable before starting the main app container HERE
      - name: wait-for-db
        image: busybox:1.28 # A small image with networking tools
        command: ['sh', '-c', 'echo -n "Waiting for DB service my-foodndeliv-db-postgresql to be resolvable..."; until nslookup my-fooddeliv-db-postgresql; do echo -n "."; sleep 2; done; echo "DB service is resolvable!"']
      containers:
      - name: foodndeliv-app-container # A name for the container within the pod
        image: foodndeliv-app:new   # Docker image name and tag (must match built image)
        imagePullPolicy: IfNotPresent # Uses local Minikube image if present.
                                     
        ports:
        - containerPort: 8080         # The port the Spring Boot app listens on Inside the container
        env:

          - name: SPRING_DATASOURCE_URL
            value: "jdbc:postgresql://my-fooddeliv-db-postgresql:5432/ordersdb"

          # Username is sourced from ConfigMap
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              configMapKeyRef:
                name: foodndeliv-db-config # Name of ConfigMap
                key: db-user                # Key within the ConfigMap
          # Password is sourced from Secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: foodndeliv-db-secret # Name of  Secret
                key: db-password            # Key within the Secret

          # --- DB connection properties ---
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: foodndeliv-db-config
                key: db-host
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: foodndeliv-db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: foodndeliv-db-config
                key: db-name
          - name: SPRING_JPA_HIBERNATE_DDL_AUTO
            value: "create" # To alter the schema in the Minikube PostgreSQL instance.
            

            # --- OpenTelemetry Configuration ---
          - name: OTEL_SERVICE_NAME
            value: "foodndeliv-k8s" # Service name as it will appear in Jaeger
          - name: OTEL_TRACES_EXPORTER
            value: "jaeger"         # Export traces using the Jaeger exporter
          - name: OTEL_EXPORTER_JAEGER_ENDPOINT
            value: "http://my-jaeger-collector.default.svc.cluster.local:14250"
            # Your Dockerfile's ENTRYPOINT uses the javaagent directly, so these ENV vars configure it.
          - name: OTEL_TRACES_SAMPLER
            value: "always_on"      # Sample all traces for testing/dev
          - name: OTEL_METRICS_EXPORTER
            value: "none"           # Disable OTel metrics; Prometheus is used for metrics
          - name: OTEL_LOGS_EXPORTER
            value: "none"           # Disable OTel logs for this setup
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness # Standard Spring Boot readiness endpoint
            port: 8080
          initialDelaySeconds: 30 # Give more time for app with agent to start
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness # Standard Spring Boot liveness endpoint
            port: 8080
          initialDelaySeconds: 60 # Give more time for app with agent to start
          periodSeconds: 15
          failureThreshold: 3




                            
